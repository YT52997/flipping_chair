
Final1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f04  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000009  20000000  08004210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  2000000c  08004219  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000c4  08004219  000200c4  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dd24  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ad8  00000000  00000000  0002dd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d88  00000000  00000000  0002f840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000cc0  00000000  00000000  000305c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030867  00000000  00000000  00031288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e789  00000000  00000000  00061aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00137b6a  00000000  00000000  00070278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a7de2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000391c  00000000  00000000  001a7e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	08004120 	.word	0x08004120

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	08004120 	.word	0x08004120

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08a      	sub	sp, #40	; 0x28
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027a:	f000 fcc9 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027e:	f000 f8cb 	bl	8000418 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000282:	f000 f912 	bl	80004aa <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000286:	f000 fa59 	bl	800073c <MX_GPIO_Init>
  MX_TIM2_Init();
 800028a:	f000 f9e1 	bl	8000650 <MX_TIM2_Init>
  MX_ICACHE_Init();
 800028e:	f000 f91c 	bl	80004ca <MX_ICACHE_Init>
  MX_TIM1_Init();
 8000292:	f000 f92d 	bl	80004f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_PollForConversion(&hadc1,1000);
  //HAL_ADC_Start(&hadc1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PA1 TIM2 CH2
 8000296:	2104      	movs	r1, #4
 8000298:	485b      	ldr	r0, [pc, #364]	; (8000408 <main+0x194>)
 800029a:	f002 fc97 	bl	8002bcc <HAL_TIM_PWM_Start>
      int readValue = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  	  int speed = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
  	  int stall = 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	627b      	str	r3, [r7, #36]	; 0x24
  	  int a_up = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	623b      	str	r3, [r7, #32]
  	  int dry = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  	  int ir = 0 ;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
  	  int last_ir = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
  	  int last_dry = 1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
  	  int button = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	603b      	str	r3, [r7, #0]
  	  int last_button = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2180      	movs	r1, #128	; 0x80
 80002ca:	4850      	ldr	r0, [pc, #320]	; (800040c <main+0x198>)
 80002cc:	f001 f81c 	bl	8001308 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2120      	movs	r1, #32
 80002d4:	484d      	ldr	r0, [pc, #308]	; (800040c <main+0x198>)
 80002d6:	f001 f817 	bl	8001308 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  button = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80002da:	2140      	movs	r1, #64	; 0x40
 80002dc:	484c      	ldr	r0, [pc, #304]	; (8000410 <main+0x19c>)
 80002de:	f000 fffb 	bl	80012d8 <HAL_GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	603b      	str	r3, [r7, #0]
	  dry = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80002e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ea:	4848      	ldr	r0, [pc, #288]	; (800040c <main+0x198>)
 80002ec:	f000 fff4 	bl	80012d8 <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	60bb      	str	r3, [r7, #8]
	  ir = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 80002f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f8:	4845      	ldr	r0, [pc, #276]	; (8000410 <main+0x19c>)
 80002fa:	f000 ffed 	bl	80012d8 <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	607b      	str	r3, [r7, #4]
	  if(button == 1 && last_button == 0){
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d104      	bne.n	8000312 <main+0x9e>
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <main+0x9e>
		  stall = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	627b      	str	r3, [r7, #36]	; 0x24

	  }
	  if(stall){
 8000312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000314:	2b00      	cmp	r3, #0
 8000316:	d012      	beq.n	800033e <main+0xca>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	2180      	movs	r1, #128	; 0x80
 800031c:	483b      	ldr	r0, [pc, #236]	; (800040c <main+0x198>)
 800031e:	f000 fff3 	bl	8001308 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2120      	movs	r1, #32
 8000326:	4839      	ldr	r0, [pc, #228]	; (800040c <main+0x198>)
 8000328:	f000 ffee 	bl	8001308 <HAL_GPIO_WritePin>
		  //speed =  0;
		  //__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, speed);
		  if(last_dry == 0 && dry == 1){
 800032c:	69bb      	ldr	r3, [r7, #24]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d162      	bne.n	80003f8 <main+0x184>
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d15f      	bne.n	80003f8 <main+0x184>
			  stall = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	627b      	str	r3, [r7, #36]	; 0x24
 800033c:	e05c      	b.n	80003f8 <main+0x184>
		  }
	  }
	  else{
		  if(a_up){
 800033e:	6a3b      	ldr	r3, [r7, #32]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d011      	beq.n	8000368 <main+0xf4>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000344:	2201      	movs	r2, #1
 8000346:	2180      	movs	r1, #128	; 0x80
 8000348:	4830      	ldr	r0, [pc, #192]	; (800040c <main+0x198>)
 800034a:	f000 ffdd 	bl	8001308 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2120      	movs	r1, #32
 8000352:	482e      	ldr	r0, [pc, #184]	; (800040c <main+0x198>)
 8000354:	f000 ffd8 	bl	8001308 <HAL_GPIO_WritePin>
			  speed =  275;
 8000358:	f240 1313 	movw	r3, #275	; 0x113
 800035c:	60fb      	str	r3, [r7, #12]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 800035e:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <main+0x194>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	639a      	str	r2, [r3, #56]	; 0x38
 8000366:	e010      	b.n	800038a <main+0x116>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	4827      	ldr	r0, [pc, #156]	; (800040c <main+0x198>)
 800036e:	f000 ffcb 	bl	8001308 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000372:	2201      	movs	r2, #1
 8000374:	2120      	movs	r1, #32
 8000376:	4825      	ldr	r0, [pc, #148]	; (800040c <main+0x198>)
 8000378:	f000 ffc6 	bl	8001308 <HAL_GPIO_WritePin>
			  speed =  275;
 800037c:	f240 1313 	movw	r3, #275	; 0x113
 8000380:	60fb      	str	r3, [r7, #12]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed);
 8000382:	4b21      	ldr	r3, [pc, #132]	; (8000408 <main+0x194>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	639a      	str	r2, [r3, #56]	; 0x38
		  }
		  if(last_ir == 1 && ir == 0){
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d133      	bne.n	80003f8 <main+0x184>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d130      	bne.n	80003f8 <main+0x184>
			  stall = 1;
 8000396:	2301      	movs	r3, #1
 8000398:	627b      	str	r3, [r7, #36]	; 0x24
			  a_up = (a_up == 0) ? 1:0;
 800039a:	6a3b      	ldr	r3, [r7, #32]
 800039c:	2b00      	cmp	r3, #0
 800039e:	bf0c      	ite	eq
 80003a0:	2301      	moveq	r3, #1
 80003a2:	2300      	movne	r3, #0
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	623b      	str	r3, [r7, #32]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2180      	movs	r1, #128	; 0x80
 80003ac:	4817      	ldr	r0, [pc, #92]	; (800040c <main+0x198>)
 80003ae:	f000 ffab 	bl	8001308 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2120      	movs	r1, #32
 80003b6:	4815      	ldr	r0, [pc, #84]	; (800040c <main+0x198>)
 80003b8:	f000 ffa6 	bl	8001308 <HAL_GPIO_WritePin>
			  speed =  0;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
			  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, speed);
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <main+0x194>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	639a      	str	r2, [r3, #56]	; 0x38
	      // for sg996 and LD2
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2101      	movs	r1, #1
 80003cc:	4810      	ldr	r0, [pc, #64]	; (8000410 <main+0x19c>)
 80003ce:	f000 ff9b 	bl	8001308 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	480f      	ldr	r0, [pc, #60]	; (8000414 <main+0x1a0>)
 80003d8:	f000 ff96 	bl	8001308 <HAL_GPIO_WritePin>
			  HAL_Delay(2000);
 80003dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003e0:	f000 fc9a 	bl	8000d18 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2101      	movs	r1, #1
 80003e8:	4809      	ldr	r0, [pc, #36]	; (8000410 <main+0x19c>)
 80003ea:	f000 ff8d 	bl	8001308 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	4808      	ldr	r0, [pc, #32]	; (8000414 <main+0x1a0>)
 80003f4:	f000 ff88 	bl	8001308 <HAL_GPIO_WritePin>
		  }
	  }

	  last_ir = ir;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	61fb      	str	r3, [r7, #28]
	  last_dry = dry;
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	61bb      	str	r3, [r7, #24]
	  last_button = button;
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	617b      	str	r3, [r7, #20]
	  button = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000404:	e769      	b.n	80002da <main+0x66>
 8000406:	bf00      	nop
 8000408:	20000074 	.word	0x20000074
 800040c:	42020000 	.word	0x42020000
 8000410:	42020400 	.word	0x42020400
 8000414:	42020800 	.word	0x42020800

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b09e      	sub	sp, #120	; 0x78
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0318 	add.w	r3, r7, #24
 8000422:	2260      	movs	r2, #96	; 0x60
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f003 fe72 	bl	8004110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	463b      	mov	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]
 800043a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 800043c:	2000      	movs	r0, #0
 800043e:	f000 ffab 	bl	8001398 <HAL_PWREx_ControlVoltageScaling>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000448:	f000 fa9a 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800044c:	2310      	movs	r3, #16
 800044e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000454:	2310      	movs	r3, #16
 8000456:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800045c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800045e:	2300      	movs	r3, #0
 8000460:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000462:	f107 0318 	add.w	r3, r7, #24
 8000466:	4618      	mov	r0, r3
 8000468:	f001 f888 	bl	800157c <HAL_RCC_OscConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000472:	f000 fa85 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000476:	231f      	movs	r3, #31
 8000478:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800048e:	463b      	mov	r3, r7
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f001 ff48 	bl	8002328 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800049e:	f000 fa6f 	bl	8000980 <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3778      	adds	r7, #120	; 0x78
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80004ae:	f001 f845 	bl	800153c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004b2:	f001 f853 	bl	800155c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80004b6:	2002      	movs	r0, #2
 80004b8:	f000 fff0 	bl	800149c <HAL_PWREx_ConfigSupply>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80004c2:	f000 fa5d 	bl	8000980 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}

080004ca <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 ff32 	bl	8001338 <HAL_ICACHE_ConfigAssociativityMode>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80004da:	f000 fa51 	bl	8000980 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004de:	f000 ff4b 	bl	8001378 <HAL_ICACHE_Enable>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80004e8:	f000 fa4a 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b09c      	sub	sp, #112	; 0x70
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000504:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000510:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
 8000520:	615a      	str	r2, [r3, #20]
 8000522:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fdf0 	bl	8004110 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000530:	4b45      	ldr	r3, [pc, #276]	; (8000648 <MX_TIM1_Init+0x158>)
 8000532:	4a46      	ldr	r2, [pc, #280]	; (800064c <MX_TIM1_Init+0x15c>)
 8000534:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000536:	4b44      	ldr	r3, [pc, #272]	; (8000648 <MX_TIM1_Init+0x158>)
 8000538:	220f      	movs	r2, #15
 800053a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b42      	ldr	r3, [pc, #264]	; (8000648 <MX_TIM1_Init+0x158>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000542:	4b41      	ldr	r3, [pc, #260]	; (8000648 <MX_TIM1_Init+0x158>)
 8000544:	f242 720f 	movw	r2, #9999	; 0x270f
 8000548:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b3f      	ldr	r3, [pc, #252]	; (8000648 <MX_TIM1_Init+0x158>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000550:	4b3d      	ldr	r3, [pc, #244]	; (8000648 <MX_TIM1_Init+0x158>)
 8000552:	2200      	movs	r2, #0
 8000554:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000556:	4b3c      	ldr	r3, [pc, #240]	; (8000648 <MX_TIM1_Init+0x158>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800055c:	483a      	ldr	r0, [pc, #232]	; (8000648 <MX_TIM1_Init+0x158>)
 800055e:	f002 fa7d 	bl	8002a5c <HAL_TIM_Base_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000568:	f000 fa0a 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000570:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000572:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000576:	4619      	mov	r1, r3
 8000578:	4833      	ldr	r0, [pc, #204]	; (8000648 <MX_TIM1_Init+0x158>)
 800057a:	f002 fd8d 	bl	8003098 <HAL_TIM_ConfigClockSource>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000584:	f000 f9fc 	bl	8000980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000588:	482f      	ldr	r0, [pc, #188]	; (8000648 <MX_TIM1_Init+0x158>)
 800058a:	f002 fabe 	bl	8002b0a <HAL_TIM_PWM_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000594:	f000 f9f4 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000598:	2300      	movs	r3, #0
 800059a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800059c:	2300      	movs	r3, #0
 800059e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a8:	4619      	mov	r1, r3
 80005aa:	4827      	ldr	r0, [pc, #156]	; (8000648 <MX_TIM1_Init+0x158>)
 80005ac:	f003 fc08 	bl	8003dc0 <HAL_TIMEx_MasterConfigSynchronization>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80005b6:	f000 f9e3 	bl	8000980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ba:	2360      	movs	r3, #96	; 0x60
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c2:	2300      	movs	r3, #0
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005c6:	2300      	movs	r3, #0
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005ce:	2300      	movs	r3, #0
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005d2:	2300      	movs	r3, #0
 80005d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	481a      	ldr	r0, [pc, #104]	; (8000648 <MX_TIM1_Init+0x158>)
 80005e0:	f002 fc46 	bl	8002e70 <HAL_TIM_PWM_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80005ea:	f000 f9c9 	bl	8000980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000606:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <MX_TIM1_Init+0x158>)
 800062c:	f003 fc8a 	bl	8003f44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000636:	f000 f9a3 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <MX_TIM1_Init+0x158>)
 800063c:	f000 f9fa 	bl	8000a34 <HAL_TIM_MspPostInit>

}
 8000640:	bf00      	nop
 8000642:	3770      	adds	r7, #112	; 0x70
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000028 	.word	0x20000028
 800064c:	40012c00 	.word	0x40012c00

08000650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000682:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_TIM2_Init+0xe8>)
 8000684:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000688:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_TIM2_Init+0xe8>)
 800068c:	227f      	movs	r2, #127	; 0x7f
 800068e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <MX_TIM2_Init+0xe8>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_TIM2_Init+0xe8>)
 8000698:	f240 2271 	movw	r2, #625	; 0x271
 800069c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006aa:	4823      	ldr	r0, [pc, #140]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006ac:	f002 f9d6 	bl	8002a5c <HAL_TIM_Base_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006b6:	f000 f963 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c4:	4619      	mov	r1, r3
 80006c6:	481c      	ldr	r0, [pc, #112]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006c8:	f002 fce6 	bl	8003098 <HAL_TIM_ConfigClockSource>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006d2:	f000 f955 	bl	8000980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006d6:	4818      	ldr	r0, [pc, #96]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006d8:	f002 fa17 	bl	8002b0a <HAL_TIM_PWM_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006e2:	f000 f94d 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	4810      	ldr	r0, [pc, #64]	; (8000738 <MX_TIM2_Init+0xe8>)
 80006f6:	f003 fb63 	bl	8003dc0 <HAL_TIMEx_MasterConfigSynchronization>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000700:	f000 f93e 	bl	8000980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000704:	2360      	movs	r3, #96	; 0x60
 8000706:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	2204      	movs	r2, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4807      	ldr	r0, [pc, #28]	; (8000738 <MX_TIM2_Init+0xe8>)
 800071c:	f002 fba8 	bl	8002e70 <HAL_TIM_PWM_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000726:	f000 f92b 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM2_Init+0xe8>)
 800072c:	f000 f982 	bl	8000a34 <HAL_TIM_MspPostInit>

}
 8000730:	bf00      	nop
 8000732:	3738      	adds	r7, #56	; 0x38
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000074 	.word	0x20000074

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b85      	ldr	r3, [pc, #532]	; (8000968 <MX_GPIO_Init+0x22c>)
 8000754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000758:	4a83      	ldr	r2, [pc, #524]	; (8000968 <MX_GPIO_Init+0x22c>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000762:	4b81      	ldr	r3, [pc, #516]	; (8000968 <MX_GPIO_Init+0x22c>)
 8000764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b7d      	ldr	r3, [pc, #500]	; (8000968 <MX_GPIO_Init+0x22c>)
 8000772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000776:	4a7c      	ldr	r2, [pc, #496]	; (8000968 <MX_GPIO_Init+0x22c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000780:	4b79      	ldr	r3, [pc, #484]	; (8000968 <MX_GPIO_Init+0x22c>)
 8000782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b76      	ldr	r3, [pc, #472]	; (8000968 <MX_GPIO_Init+0x22c>)
 8000790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000794:	4a74      	ldr	r2, [pc, #464]	; (8000968 <MX_GPIO_Init+0x22c>)
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800079e:	4b72      	ldr	r3, [pc, #456]	; (8000968 <MX_GPIO_Init+0x22c>)
 80007a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ac:	4b6e      	ldr	r3, [pc, #440]	; (8000968 <MX_GPIO_Init+0x22c>)
 80007ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007b2:	4a6d      	ldr	r2, [pc, #436]	; (8000968 <MX_GPIO_Init+0x22c>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007bc:	4b6a      	ldr	r3, [pc, #424]	; (8000968 <MX_GPIO_Init+0x22c>)
 80007be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ca:	4b67      	ldr	r3, [pc, #412]	; (8000968 <MX_GPIO_Init+0x22c>)
 80007cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d0:	4a65      	ldr	r2, [pc, #404]	; (8000968 <MX_GPIO_Init+0x22c>)
 80007d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007da:	4b63      	ldr	r3, [pc, #396]	; (8000968 <MX_GPIO_Init+0x22c>)
 80007dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	21a0      	movs	r1, #160	; 0xa0
 80007ec:	485f      	ldr	r0, [pc, #380]	; (800096c <MX_GPIO_Init+0x230>)
 80007ee:	f000 fd8b 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	21a1      	movs	r1, #161	; 0xa1
 80007f6:	485e      	ldr	r0, [pc, #376]	; (8000970 <MX_GPIO_Init+0x234>)
 80007f8:	f000 fd86 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2104      	movs	r1, #4
 8000800:	485c      	ldr	r0, [pc, #368]	; (8000974 <MX_GPIO_Init+0x238>)
 8000802:	f000 fd81 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	485b      	ldr	r0, [pc, #364]	; (8000978 <MX_GPIO_Init+0x23c>)
 800080c:	f000 fd7c 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	4b59      	ldr	r3, [pc, #356]	; (800097c <MX_GPIO_Init+0x240>)
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4854      	ldr	r0, [pc, #336]	; (8000978 <MX_GPIO_Init+0x23c>)
 8000826:	f000 fb7f 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800082a:	2304      	movs	r3, #4
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	484e      	ldr	r0, [pc, #312]	; (8000978 <MX_GPIO_Init+0x23c>)
 800083e:	f000 fb73 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4844      	ldr	r0, [pc, #272]	; (800096c <MX_GPIO_Init+0x230>)
 800085a:	f000 fb65 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|UCPD_DBn_Pin|LED_BLUE_Pin;
 800085e:	23a1      	movs	r3, #161	; 0xa1
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	483e      	ldr	r0, [pc, #248]	; (8000970 <MX_GPIO_Init+0x234>)
 8000876:	f000 fb57 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_FLT_Pin PB6 PB9 */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin|GPIO_PIN_6|GPIO_PIN_9;
 800087a:	f244 2340 	movw	r3, #16960	; 0x4240
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4838      	ldr	r0, [pc, #224]	; (8000970 <MX_GPIO_Init+0x234>)
 8000890:	f000 fb4a 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089a:	2303      	movs	r3, #3
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4831      	ldr	r0, [pc, #196]	; (8000970 <MX_GPIO_Init+0x234>)
 80008aa:	f000 fb3d 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80008ae:	2304      	movs	r3, #4
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	482b      	ldr	r0, [pc, #172]	; (8000974 <MX_GPIO_Init+0x238>)
 80008c6:	f000 fb2f 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4825      	ldr	r0, [pc, #148]	; (8000978 <MX_GPIO_Init+0x23c>)
 80008e2:	f000 fb21 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	481c      	ldr	r0, [pc, #112]	; (800096c <MX_GPIO_Init+0x230>)
 80008fc:	f000 fb14 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000900:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000912:	2307      	movs	r3, #7
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_GPIO_Init+0x230>)
 800091e:	f000 fb03 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000922:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000934:	230a      	movs	r3, #10
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0x230>)
 8000940:	f000 faf2 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_GPIO_Init+0x230>)
 800095a:	f000 fae5 	bl	8000f28 <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	46020c00 	.word	0x46020c00
 800096c:	42020000 	.word	0x42020000
 8000970:	42020400 	.word	0x42020400
 8000974:	42021800 	.word	0x42021800
 8000978:	42020800 	.word	0x42020800
 800097c:	10110000 	.word	0x10110000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_MspInit+0x34>)
 8000994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_MspInit+0x34>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_MspInit+0x34>)
 80009a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80009b0:	2004      	movs	r0, #4
 80009b2:	f000 fa87 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	46020c00 	.word	0x46020c00

080009c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <HAL_TIM_Base_MspInit+0x68>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d10f      	bne.n	80009f6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 80009d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 80009de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009e2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 80009e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009f4:	e013      	b.n	8000a1e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fe:	d10e      	bne.n	8000a1e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 8000a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_TIM_Base_MspInit+0x6c>)
 8000a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	46020c00 	.word	0x46020c00

08000a34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <HAL_TIM_MspPostInit+0xb4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d120      	bne.n	8000a98 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <HAL_TIM_MspPostInit+0xb8>)
 8000a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a5c:	4a23      	ldr	r2, [pc, #140]	; (8000aec <HAL_TIM_MspPostInit+0xb8>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_TIM_MspPostInit+0xb8>)
 8000a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4817      	ldr	r0, [pc, #92]	; (8000af0 <HAL_TIM_MspPostInit+0xbc>)
 8000a92:	f000 fa49 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a96:	e023      	b.n	8000ae0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa0:	d11e      	bne.n	8000ae0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_TIM_MspPostInit+0xb8>)
 8000aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa8:	4a10      	ldr	r2, [pc, #64]	; (8000aec <HAL_TIM_MspPostInit+0xb8>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_TIM_MspPostInit+0xb8>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_TIM_MspPostInit+0xc0>)
 8000adc:	f000 fa24 	bl	8000f28 <HAL_GPIO_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40012c00 	.word	0x40012c00
 8000aec:	46020c00 	.word	0x46020c00
 8000af0:	42021000 	.word	0x42021000
 8000af4:	42020000 	.word	0x42020000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f8c8 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <SystemInit+0x68>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <SystemInit+0x68>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <SystemInit+0x6c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <SystemInit+0x6c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <SystemInit+0x6c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <SystemInit+0x6c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <SystemInit+0x6c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <SystemInit+0x6c>)
 8000b7e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b82:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b86:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <SystemInit+0x6c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SystemInit+0x6c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <SystemInit+0x6c>)
 8000b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <SystemInit+0x6c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SystemInit+0x68>)
 8000ba2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ba6:	609a      	str	r2, [r3, #8]
  #endif
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00
 8000bb8:	46020c00 	.word	0x46020c00

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bc2:	e003      	b.n	8000bcc <LoopCopyDataInit>

08000bc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bca:	3104      	adds	r1, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bd4:	d3f6      	bcc.n	8000bc4 <CopyDataInit>
	ldr	r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bd8:	e002      	b.n	8000be0 <LoopFillZerobss>

08000bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bdc:	f842 3b04 	str.w	r3, [r2], #4

08000be0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <LoopForever+0x16>)
	cmp	r2, r3
 8000be2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000be4:	d3f9      	bcc.n	8000bda <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be6:	f7ff ffb1 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f003 fa6d 	bl	80040c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fb41 	bl	8000274 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000bf4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000bf8:	08004210 	.word	0x08004210
	ldr	r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c00:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c08:	200000c4 	.word	0x200000c4

08000c0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_Init+0x4c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_Init+0x4c>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f94f 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c26:	f001 fd71 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_Init+0x50>)
 8000c2e:	6a1b      	ldr	r3, [r3, #32]
 8000c30:	f003 030f 	and.w	r3, r3, #15
 8000c34:	490b      	ldr	r1, [pc, #44]	; (8000c64 <HAL_Init+0x54>)
 8000c36:	5ccb      	ldrb	r3, [r1, r3]
 8000c38:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x58>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 f813 	bl	8000c6c <HAL_InitTick>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e002      	b.n	8000c56 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fe9c 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40022000 	.word	0x40022000
 8000c60:	46020c00 	.word	0x46020c00
 8000c64:	08004138 	.word	0x08004138
 8000c68:	20000000 	.word	0x20000000

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_InitTick+0x60>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d101      	bne.n	8000c80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e021      	b.n	8000cc4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_InitTick+0x64>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_InitTick+0x60>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f939 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00e      	b.n	8000cc4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d80a      	bhi.n	8000cc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f911 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <HAL_InitTick+0x68>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	200000c0 	.word	0x200000c0

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200000c0 	.word	0x200000c0

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffee 	bl	8000d00 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffde 	bl	8000d00 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff47 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff90 	bl	8000e18 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5f 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb2 	bl	8000e80 <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f3a:	e1ba      	b.n	80012b2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 81aa 	beq.w	80012ac <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a55      	ldr	r2, [pc, #340]	; (80010b0 <HAL_GPIO_Init+0x188>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d15d      	bne.n	800101c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f66:	2201      	movs	r2, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f90:	4a48      	ldr	r2, [pc, #288]	; (80010b4 <HAL_GPIO_Init+0x18c>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f98:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f9a:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <HAL_GPIO_Init+0x18c>)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	3208      	adds	r2, #8
 8000fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220b      	movs	r2, #11
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	69f9      	ldr	r1, [r7, #28]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4013      	ands	r3, r2
 8001002:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2202      	movs	r2, #2
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	4313      	orrs	r3, r2
 8001012:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e067      	b.n	80010ec <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x104>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b12      	cmp	r3, #18
 800102a:	d145      	bne.n	80010b8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	4013      	ands	r3, r2
 800104e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	f003 020f 	and.w	r2, r3, #15
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	4313      	orrs	r3, r2
 8001068:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69f9      	ldr	r1, [r7, #28]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	4013      	ands	r3, r2
 800108e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e01e      	b.n	80010ec <HAL_GPIO_Init+0x1c4>
 80010ae:	bf00      	nop
 80010b0:	46020000 	.word	0x46020000
 80010b4:	08004188 	.word	0x08004188
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d00b      	beq.n	800110c <HAL_GPIO_Init+0x1e4>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001100:	2b11      	cmp	r3, #17
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b12      	cmp	r3, #18
 800110a:	d130      	bne.n	800116e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	4013      	ands	r3, r2
 8001122:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	4313      	orrs	r3, r2
 8001134:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001142:	2201      	movs	r2, #1
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	4013      	ands	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 0201 	and.w	r2, r3, #1
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	4313      	orrs	r3, r2
 8001166:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d017      	beq.n	80011a6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	4013      	ands	r3, r2
 800118c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	4313      	orrs	r3, r2
 800119e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d07c      	beq.n	80012ac <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011b2:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3318      	adds	r3, #24
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	0a9a      	lsrs	r2, r3, #10
 80011da:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <HAL_GPIO_Init+0x3ac>)
 80011dc:	4013      	ands	r3, r2
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	f002 0203 	and.w	r2, r2, #3
 80011e4:	00d2      	lsls	r2, r2, #3
 80011e6:	4093      	lsls	r3, r2
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011ee:	4938      	ldr	r1, [pc, #224]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3318      	adds	r3, #24
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43db      	mvns	r3, r3
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4013      	ands	r3, r2
 800120a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001220:	4a2b      	ldr	r2, [pc, #172]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43db      	mvns	r3, r3
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	4013      	ands	r3, r2
 8001234:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800124a:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001256:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43db      	mvns	r3, r3
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	4013      	ands	r3, r2
 8001260:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 8001280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001284:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	4013      	ands	r3, r2
 800128e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_GPIO_Init+0x3a8>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f47f ae3d 	bne.w	8000f3c <HAL_GPIO_Init+0x14>
  }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3724      	adds	r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	46022000 	.word	0x46022000
 80012d4:	002f7f7f 	.word	0x002f7f7f

080012d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001324:	e002      	b.n	800132c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e007      	b.n	8001366 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 0204 	bic.w	r2, r3, #4
 800135e:	4905      	ldr	r1, [pc, #20]	; (8001374 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40030400 	.word	0x40030400

08001378 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_ICACHE_Enable+0x1c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_ICACHE_Enable+0x1c>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40030400 	.word	0x40030400

08001398 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d101      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e057      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d90a      	bls.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	4a2a      	ldr	r2, [pc, #168]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	60d3      	str	r3, [r2, #12]
 80013d2:	e007      	b.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80013dc:	4925      	ldr	r1, [pc, #148]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a24      	ldr	r2, [pc, #144]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	099b      	lsrs	r3, r3, #6
 80013f0:	2232      	movs	r2, #50	; 0x32
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	4a21      	ldr	r2, [pc, #132]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001402:	e002      	b.n	800140a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3b01      	subs	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x84>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f3      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01b      	beq.n	800145a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a15      	ldr	r2, [pc, #84]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	2232      	movs	r2, #50	; 0x32
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	099b      	lsrs	r3, r3, #6
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001440:	e002      	b.n	8001448 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3b01      	subs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f3      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e000      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	46020800 	.word	0x46020800
 8001478:	20000000 	.word	0x20000000
 800147c:	10624dd3 	.word	0x10624dd3

08001480 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <HAL_PWREx_GetVoltageRange+0x18>)
 8001486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	46020800 	.word	0x46020800

0800149c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_PWREx_ConfigSupply+0x94>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <HAL_PWREx_ConfigSupply+0x98>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	099b      	lsrs	r3, r3, #6
 80014b0:	2232      	movs	r2, #50	; 0x32
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	4a1f      	ldr	r2, [pc, #124]	; (8001534 <HAL_PWREx_ConfigSupply+0x98>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d113      	bne.n	80014f0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_PWREx_ConfigSupply+0x9c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <HAL_PWREx_ConfigSupply+0x9c>)
 80014ce:	f023 0302 	bic.w	r3, r3, #2
 80014d2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014d4:	e002      	b.n	80014dc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3b01      	subs	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_PWREx_ConfigSupply+0x9c>)
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d116      	bne.n	8001516 <HAL_PWREx_ConfigSupply+0x7a>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f3      	bne.n	80014d6 <HAL_PWREx_ConfigSupply+0x3a>
 80014ee:	e012      	b.n	8001516 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_PWREx_ConfigSupply+0x9c>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_PWREx_ConfigSupply+0x9c>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014fc:	e002      	b.n	8001504 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3b01      	subs	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_PWREx_ConfigSupply+0x9c>)
 8001506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <HAL_PWREx_ConfigSupply+0x7a>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f3      	bne.n	80014fe <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e000      	b.n	8001522 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000
 8001534:	10624dd3 	.word	0x10624dd3
 8001538:	46020800 	.word	0x46020800

0800153c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001546:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800154a:	6113      	str	r3, [r2, #16]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	46020800 	.word	0x46020800

0800155c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	46020800 	.word	0x46020800

0800157c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	f000 bec3 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001596:	4b9c      	ldr	r3, [pc, #624]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a0:	4b99      	ldr	r3, [pc, #612]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8172 	beq.w	800189c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80015b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <HAL_RCC_OscConfig+0x52>
 80015be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	f040 80e4 	bne.w	800178e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	f040 80e0 	bne.w	800178e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ce:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <HAL_RCC_OscConfig+0x6c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f000 be9a 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ec:	4b86      	ldr	r3, [pc, #536]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d004      	beq.n	8001602 <HAL_RCC_OscConfig+0x86>
 80015f8:	4b83      	ldr	r3, [pc, #524]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001600:	e005      	b.n	800160e <HAL_RCC_OscConfig+0x92>
 8001602:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800160e:	4293      	cmp	r3, r2
 8001610:	d255      	bcs.n	80016be <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10a      	bne.n	800162e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	4618      	mov	r0, r3
 800161e:	f001 f997 	bl	8002950 <RCC_SetFlashLatencyFromMSIRange>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	f000 be77 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800162e:	4b76      	ldr	r3, [pc, #472]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	4a75      	ldr	r2, [pc, #468]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001638:	6093      	str	r3, [r2, #8]
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	4970      	ldr	r1, [pc, #448]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001654:	d309      	bcc.n	800166a <HAL_RCC_OscConfig+0xee>
 8001656:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f023 021f 	bic.w	r2, r3, #31
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4969      	ldr	r1, [pc, #420]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001664:	4313      	orrs	r3, r2
 8001666:	60cb      	str	r3, [r1, #12]
 8001668:	e07e      	b.n	8001768 <HAL_RCC_OscConfig+0x1ec>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	2b00      	cmp	r3, #0
 8001670:	da0a      	bge.n	8001688 <HAL_RCC_OscConfig+0x10c>
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	015b      	lsls	r3, r3, #5
 8001680:	4961      	ldr	r1, [pc, #388]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	60cb      	str	r3, [r1, #12]
 8001686:	e06f      	b.n	8001768 <HAL_RCC_OscConfig+0x1ec>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001690:	d30a      	bcc.n	80016a8 <HAL_RCC_OscConfig+0x12c>
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	029b      	lsls	r3, r3, #10
 80016a0:	4959      	ldr	r1, [pc, #356]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60cb      	str	r3, [r1, #12]
 80016a6:	e05f      	b.n	8001768 <HAL_RCC_OscConfig+0x1ec>
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	03db      	lsls	r3, r3, #15
 80016b6:	4954      	ldr	r1, [pc, #336]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
 80016bc:	e054      	b.n	8001768 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80016be:	4b52      	ldr	r3, [pc, #328]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4a51      	ldr	r2, [pc, #324]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80016c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016c8:	6093      	str	r3, [r2, #8]
 80016ca:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	494c      	ldr	r1, [pc, #304]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80016e4:	d309      	bcc.n	80016fa <HAL_RCC_OscConfig+0x17e>
 80016e6:	4b48      	ldr	r3, [pc, #288]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f023 021f 	bic.w	r2, r3, #31
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4945      	ldr	r1, [pc, #276]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
 80016f8:	e028      	b.n	800174c <HAL_RCC_OscConfig+0x1d0>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da0a      	bge.n	8001718 <HAL_RCC_OscConfig+0x19c>
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	493d      	ldr	r1, [pc, #244]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001712:	4313      	orrs	r3, r2
 8001714:	60cb      	str	r3, [r1, #12]
 8001716:	e019      	b.n	800174c <HAL_RCC_OscConfig+0x1d0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001720:	d30a      	bcc.n	8001738 <HAL_RCC_OscConfig+0x1bc>
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	4935      	ldr	r1, [pc, #212]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001732:	4313      	orrs	r3, r2
 8001734:	60cb      	str	r3, [r1, #12]
 8001736:	e009      	b.n	800174c <HAL_RCC_OscConfig+0x1d0>
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	03db      	lsls	r3, r3, #15
 8001746:	4930      	ldr	r1, [pc, #192]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001748:	4313      	orrs	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10a      	bne.n	8001768 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	4618      	mov	r0, r3
 8001758:	f001 f8fa 	bl	8002950 <RCC_SetFlashLatencyFromMSIRange>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f000 bdda 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001768:	f001 f8d8 	bl	800291c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x290>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fa7b 	bl	8000c6c <HAL_InitTick>
 8001776:	4603      	mov	r3, r0
 8001778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800177c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 808a 	beq.w	800189a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8001786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800178a:	f000 bdc7 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d066      	beq.n	8001864 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80017a2:	f7ff faad 	bl	8000d00 <HAL_GetTick>
 80017a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80017a8:	e009      	b.n	80017be <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017aa:	f7ff faa9 	bl	8000d00 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d902      	bls.n	80017be <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	f000 bdaf 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0ef      	beq.n	80017aa <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80017d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017d4:	6093      	str	r3, [r2, #8]
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	4909      	ldr	r1, [pc, #36]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80017f0:	d30e      	bcc.n	8001810 <HAL_RCC_OscConfig+0x294>
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f023 021f 	bic.w	r2, r3, #31
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4902      	ldr	r1, [pc, #8]	; (8001808 <HAL_RCC_OscConfig+0x28c>)
 8001800:	4313      	orrs	r3, r2
 8001802:	60cb      	str	r3, [r1, #12]
 8001804:	e04a      	b.n	800189c <HAL_RCC_OscConfig+0x320>
 8001806:	bf00      	nop
 8001808:	46020c00 	.word	0x46020c00
 800180c:	20000004 	.word	0x20000004
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2b00      	cmp	r3, #0
 8001816:	da0a      	bge.n	800182e <HAL_RCC_OscConfig+0x2b2>
 8001818:	4b9b      	ldr	r3, [pc, #620]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	015b      	lsls	r3, r3, #5
 8001826:	4998      	ldr	r1, [pc, #608]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	60cb      	str	r3, [r1, #12]
 800182c:	e036      	b.n	800189c <HAL_RCC_OscConfig+0x320>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001836:	d30a      	bcc.n	800184e <HAL_RCC_OscConfig+0x2d2>
 8001838:	4b93      	ldr	r3, [pc, #588]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	029b      	lsls	r3, r3, #10
 8001846:	4990      	ldr	r1, [pc, #576]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
 800184c:	e026      	b.n	800189c <HAL_RCC_OscConfig+0x320>
 800184e:	4b8e      	ldr	r3, [pc, #568]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	03db      	lsls	r3, r3, #15
 800185c:	498a      	ldr	r1, [pc, #552]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	60cb      	str	r3, [r1, #12]
 8001862:	e01b      	b.n	800189c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001864:	4b88      	ldr	r3, [pc, #544]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a87      	ldr	r2, [pc, #540]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001870:	f7ff fa46 	bl	8000d00 <HAL_GetTick>
 8001874:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001876:	e009      	b.n	800188c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001878:	f7ff fa42 	bl	8000d00 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d902      	bls.n	800188c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	f000 bd48 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800188c:	4b7e      	ldr	r3, [pc, #504]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ef      	bne.n	8001878 <HAL_RCC_OscConfig+0x2fc>
 8001898:	e000      	b.n	800189c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800189a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8094 	beq.w	80019d2 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80018aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_OscConfig+0x340>
 80018b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d110      	bne.n	80018d8 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d10d      	bne.n	80018d8 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	4b72      	ldr	r3, [pc, #456]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8083 	beq.w	80019d0 <HAL_RCC_OscConfig+0x454>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d17e      	bne.n	80019d0 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	f000 bd22 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d106      	bne.n	80018f0 <HAL_RCC_OscConfig+0x374>
 80018e2:	4b69      	ldr	r3, [pc, #420]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a68      	ldr	r2, [pc, #416]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e041      	b.n	8001974 <HAL_RCC_OscConfig+0x3f8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x3a4>
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a62      	ldr	r2, [pc, #392]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b60      	ldr	r3, [pc, #384]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a5f      	ldr	r2, [pc, #380]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800190c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a5c      	ldr	r2, [pc, #368]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e029      	b.n	8001974 <HAL_RCC_OscConfig+0x3f8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001928:	d112      	bne.n	8001950 <HAL_RCC_OscConfig+0x3d4>
 800192a:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a56      	ldr	r2, [pc, #344]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a53      	ldr	r2, [pc, #332]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800193c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a50      	ldr	r2, [pc, #320]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e011      	b.n	8001974 <HAL_RCC_OscConfig+0x3f8>
 8001950:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a4c      	ldr	r2, [pc, #304]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800196e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d014      	beq.n	80019a6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800197c:	f7ff f9c0 	bl	8000d00 <HAL_GetTick>
 8001980:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001982:	e009      	b.n	8001998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff f9bc 	bl	8000d00 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d902      	bls.n	8001998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	f000 bcc2 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x408>
 80019a4:	e015      	b.n	80019d2 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80019a6:	f7ff f9ab 	bl	8000d00 <HAL_GetTick>
 80019aa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ac:	e009      	b.n	80019c2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ae:	f7ff f9a7 	bl	8000d00 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	; 0x64
 80019ba:	d902      	bls.n	80019c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	f000 bcad 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1ef      	bne.n	80019ae <HAL_RCC_OscConfig+0x432>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d066      	beq.n	8001aac <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_OscConfig+0x474>
 80019e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d11a      	bne.n	8001a20 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d117      	bne.n	8001a20 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_RCC_OscConfig+0x48e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f000 bc89 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	491b      	ldr	r1, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a1e:	e045      	b.n	8001aac <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d024      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a32:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a34:	f7ff f964 	bl	8000d00 <HAL_GetTick>
 8001a38:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3a:	e009      	b.n	8001a50 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f960 	bl	8000d00 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d902      	bls.n	8001a50 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f000 bc66 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0ef      	beq.n	8001a3c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	4907      	ldr	r1, [pc, #28]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	610b      	str	r3, [r1, #16]
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_RCC_OscConfig+0x50c>)
 8001a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a7e:	f7ff f93f 	bl	8000d00 <HAL_GetTick>
 8001a82:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a84:	e00c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x524>
 8001a86:	bf00      	nop
 8001a88:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff f938 	bl	8000d00 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d902      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	f000 bc3e 	b.w	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa0:	4baf      	ldr	r3, [pc, #700]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1ef      	bne.n	8001a8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80c7 	beq.w	8001c48 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac0:	4ba7      	ldr	r3, [pc, #668]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d111      	bne.n	8001af2 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4ba4      	ldr	r3, [pc, #656]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad4:	4aa2      	ldr	r2, [pc, #648]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ade:	4ba0      	ldr	r3, [pc, #640]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001af2:	4b9c      	ldr	r3, [pc, #624]	; (8001d64 <HAL_RCC_OscConfig+0x7e8>)
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001afe:	4b99      	ldr	r3, [pc, #612]	; (8001d64 <HAL_RCC_OscConfig+0x7e8>)
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	4a98      	ldr	r2, [pc, #608]	; (8001d64 <HAL_RCC_OscConfig+0x7e8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f8f9 	bl	8000d00 <HAL_GetTick>
 8001b0e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b12:	f7ff f8f5 	bl	8000d00 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e3fb      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b24:	4b8f      	ldr	r3, [pc, #572]	; (8001d64 <HAL_RCC_OscConfig+0x7e8>)
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d05f      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001b38:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b3e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d037      	beq.n	8001bbe <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e3da      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01b      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b70:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b76:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001b78:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001b7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001b80:	f7ff f8be 	bl	8000d00 <HAL_GetTick>
 8001b84:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff f8ba 	bl	8000d00 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e3c0      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b9a:	4b71      	ldr	r3, [pc, #452]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ef      	bne.n	8001b88 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001ba8:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	496a      	ldr	r1, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc4:	4a66      	ldr	r2, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001bce:	f7ff f897 	bl	8000d00 <HAL_GetTick>
 8001bd2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd6:	f7ff f893 	bl	8000d00 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e399      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001be8:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0ef      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x65a>
 8001bf6:	e01b      	b.n	8001c30 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfe:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001c00:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001c04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001c08:	f7ff f87a 	bl	8000d00 <HAL_GetTick>
 8001c0c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff f876 	bl	8000d00 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e37c      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c22:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ef      	bne.n	8001c10 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c38:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8112 	beq.w	8001e7a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5c:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d111      	bne.n	8001c8e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c70:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c8e:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_RCC_OscConfig+0x7e8>)
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d118      	bne.n	8001ccc <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001c9a:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_RCC_OscConfig+0x7e8>)
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	4a31      	ldr	r2, [pc, #196]	; (8001d64 <HAL_RCC_OscConfig+0x7e8>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f82b 	bl	8000d00 <HAL_GetTick>
 8001caa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cae:	f7ff f827 	bl	8000d00 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e32d      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <HAL_RCC_OscConfig+0x7e8>)
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01f      	beq.n	8001d18 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d010      	beq.n	8001d06 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cea:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cfa:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d04:	e018      	b.n	8001d38 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d16:	e00f      	b.n	8001d38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_RCC_OscConfig+0x7e4>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d058      	beq.n	8001df2 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8001d40:	f7fe ffde 	bl	8000d00 <HAL_GetTick>
 8001d44:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d46:	e00f      	b.n	8001d68 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7fe ffda 	bl	8000d00 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d906      	bls.n	8001d68 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e2de      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
 8001d5e:	bf00      	nop
 8001d60:	46020c00 	.word	0x46020c00
 8001d64:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d68:	4b9c      	ldr	r3, [pc, #624]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0e8      	beq.n	8001d48 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01b      	beq.n	8001dba <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d82:	4b96      	ldr	r3, [pc, #600]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d88:	4a94      	ldr	r2, [pc, #592]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7fe ffb4 	bl	8000d00 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e2b8      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001daa:	4b8c      	ldr	r3, [pc, #560]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ed      	beq.n	8001d94 <HAL_RCC_OscConfig+0x818>
 8001db8:	e053      	b.n	8001e62 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001dba:	4b88      	ldr	r3, [pc, #544]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dc0:	4a86      	ldr	r2, [pc, #536]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7fe ff98 	bl	8000d00 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e29c      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001de2:	4b7e      	ldr	r3, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ed      	bne.n	8001dcc <HAL_RCC_OscConfig+0x850>
 8001df0:	e037      	b.n	8001e62 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001df2:	f7fe ff85 	bl	8000d00 <HAL_GetTick>
 8001df6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7fe ff81 	bl	8000d00 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e285      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e10:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ed      	bne.n	8001dfa <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001e1e:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01a      	beq.n	8001e62 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e2c:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e32:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe ff5f 	bl	8000d00 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e263      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e54:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ed      	bne.n	8001e3e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e62:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b5c      	ldr	r3, [pc, #368]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e70:	4a5a      	ldr	r2, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001e72:	f023 0304 	bic.w	r3, r3, #4
 8001e76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d036      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d019      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001e8e:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a52      	ldr	r2, [pc, #328]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001e94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e98:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e9a:	f7fe ff31 	bl	8000d00 <HAL_GetTick>
 8001e9e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea2:	f7fe ff2d 	bl	8000d00 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e233      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001eb4:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x926>
 8001ec0:	e018      	b.n	8001ef4 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001ec2:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a45      	ldr	r2, [pc, #276]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ecc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ece:	f7fe ff17 	bl	8000d00 <HAL_GetTick>
 8001ed2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed6:	f7fe ff13 	bl	8000d00 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e219      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ee8:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f0      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d036      	beq.n	8001f6e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d019      	beq.n	8001f3c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001f08:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f14:	f7fe fef4 	bl	8000d00 <HAL_GetTick>
 8001f18:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fef0 	bl	8000d00 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1f6      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x9a0>
 8001f3a:	e018      	b.n	8001f6e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f48:	f7fe feda 	bl	8000d00 <HAL_GetTick>
 8001f4c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001f50:	f7fe fed6 	bl	8000d00 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1dc      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d07f      	beq.n	800207a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d062      	beq.n	8002048 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f8c:	6093      	str	r3, [r2, #8]
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	4910      	ldr	r1, [pc, #64]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001fa8:	d309      	bcc.n	8001fbe <HAL_RCC_OscConfig+0xa42>
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f023 021f 	bic.w	r2, r3, #31
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4909      	ldr	r1, [pc, #36]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
 8001fbc:	e02a      	b.n	8002014 <HAL_RCC_OscConfig+0xa98>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	da0c      	bge.n	8001fe0 <HAL_RCC_OscConfig+0xa64>
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	015b      	lsls	r3, r3, #5
 8001fd4:	4901      	ldr	r1, [pc, #4]	; (8001fdc <HAL_RCC_OscConfig+0xa60>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60cb      	str	r3, [r1, #12]
 8001fda:	e01b      	b.n	8002014 <HAL_RCC_OscConfig+0xa98>
 8001fdc:	46020c00 	.word	0x46020c00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d30a      	bcc.n	8002000 <HAL_RCC_OscConfig+0xa84>
 8001fea:	4ba5      	ldr	r3, [pc, #660]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	029b      	lsls	r3, r3, #10
 8001ff8:	49a1      	ldr	r1, [pc, #644]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60cb      	str	r3, [r1, #12]
 8001ffe:	e009      	b.n	8002014 <HAL_RCC_OscConfig+0xa98>
 8002000:	4b9f      	ldr	r3, [pc, #636]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	03db      	lsls	r3, r3, #15
 800200e:	499c      	ldr	r1, [pc, #624]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002010:	4313      	orrs	r3, r2
 8002012:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002014:	4b9a      	ldr	r3, [pc, #616]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a99      	ldr	r2, [pc, #612]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002020:	f7fe fe6e 	bl	8000d00 <HAL_GetTick>
 8002024:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002028:	f7fe fe6a 	bl	8000d00 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e170      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800203a:	4b91      	ldr	r3, [pc, #580]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0xaac>
 8002046:	e018      	b.n	800207a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002048:	4b8d      	ldr	r3, [pc, #564]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a8c      	ldr	r2, [pc, #560]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800204e:	f023 0310 	bic.w	r3, r3, #16
 8002052:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002054:	f7fe fe54 	bl	8000d00 <HAL_GetTick>
 8002058:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800205c:	f7fe fe50 	bl	8000d00 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e156      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800206e:	4b84      	ldr	r3, [pc, #528]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 814b 	beq.w	800231a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208a:	4b7d      	ldr	r3, [pc, #500]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b0c      	cmp	r3, #12
 8002094:	f000 80fa 	beq.w	800228c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	2b02      	cmp	r3, #2
 800209e:	f040 80cc 	bne.w	800223a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b77      	ldr	r3, [pc, #476]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a76      	ldr	r2, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80020a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80020ae:	f7fe fe27 	bl	8000d00 <HAL_GetTick>
 80020b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7fe fe23 	bl	8000d00 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e129      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f0      	bne.n	80020b6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d111      	bne.n	8002106 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80020e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e8:	4a65      	ldr	r2, [pc, #404]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80020f2:	4b63      	ldr	r3, [pc, #396]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80020f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002106:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <HAL_RCC_OscConfig+0xd08>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002112:	d102      	bne.n	800211a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800211a:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <HAL_RCC_OscConfig+0xd08>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4a59      	ldr	r2, [pc, #356]	; (8002284 <HAL_RCC_OscConfig+0xd08>)
 8002120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002124:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002126:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800213a:	3a01      	subs	r2, #1
 800213c:	0212      	lsls	r2, r2, #8
 800213e:	4311      	orrs	r1, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002144:	430a      	orrs	r2, r1
 8002146:	494e      	ldr	r1, [pc, #312]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002148:	4313      	orrs	r3, r2
 800214a:	628b      	str	r3, [r1, #40]	; 0x28
 800214c:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800214e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002150:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <HAL_RCC_OscConfig+0xd0c>)
 8002152:	4013      	ands	r3, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002158:	3a01      	subs	r2, #1
 800215a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002162:	3a01      	subs	r2, #1
 8002164:	0252      	lsls	r2, r2, #9
 8002166:	b292      	uxth	r2, r2
 8002168:	4311      	orrs	r1, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800216e:	3a01      	subs	r2, #1
 8002170:	0412      	lsls	r2, r2, #16
 8002172:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800217c:	3a01      	subs	r2, #1
 800217e:	0612      	lsls	r2, r2, #24
 8002180:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002184:	430a      	orrs	r2, r1
 8002186:	493e      	ldr	r1, [pc, #248]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002188:	4313      	orrs	r3, r2
 800218a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800218c:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002192:	f023 0310 	bic.w	r3, r3, #16
 8002196:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021a8:	00d2      	lsls	r2, r2, #3
 80021aa:	4935      	ldr	r1, [pc, #212]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80021b0:	4b33      	ldr	r3, [pc, #204]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	4a32      	ldr	r2, [pc, #200]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80021b6:	f043 0310 	orr.w	r3, r3, #16
 80021ba:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80021bc:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	f023 020c 	bic.w	r2, r3, #12
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	492d      	ldr	r1, [pc, #180]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80021ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80021d6:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <HAL_RCC_OscConfig+0xd08>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <HAL_RCC_OscConfig+0xd08>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80021e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80021ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f0:	4a23      	ldr	r2, [pc, #140]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80021f2:	f023 0304 	bic.w	r3, r3, #4
 80021f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021fa:	4b21      	ldr	r3, [pc, #132]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	4a20      	ldr	r2, [pc, #128]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800220c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002210:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002212:	f7fe fd75 	bl	8000d00 <HAL_GetTick>
 8002216:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fd71 	bl	8000d00 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e077      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0xc9e>
 8002238:	e06f      	b.n	800231a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002244:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002246:	f7fe fd5b 	bl	8000d00 <HAL_GetTick>
 800224a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7fe fd57 	bl	8000d00 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e05d      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <HAL_RCC_OscConfig+0xd04>)
 8002272:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	6293      	str	r3, [r2, #40]	; 0x28
 800227c:	e04d      	b.n	800231a <HAL_RCC_OscConfig+0xd9e>
 800227e:	bf00      	nop
 8002280:	46020c00 	.word	0x46020c00
 8002284:	46020800 	.word	0x46020800
 8002288:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_RCC_OscConfig+0xda8>)
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_RCC_OscConfig+0xda8>)
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	2b01      	cmp	r3, #1
 800229e:	d03a      	beq.n	8002316 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0203 	and.w	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d133      	bne.n	8002316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d12a      	bne.n	8002316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	0b1b      	lsrs	r3, r3, #12
 80022c4:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d122      	bne.n	8002316 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022da:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d11a      	bne.n	8002316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	0a5b      	lsrs	r3, r3, #9
 80022e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d111      	bne.n	8002316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d108      	bne.n	8002316 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	0e1b      	lsrs	r3, r3, #24
 8002308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3738      	adds	r7, #56	; 0x38
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	46020c00 	.word	0x46020c00

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e1d9      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b9b      	ldr	r3, [pc, #620]	; (80025ac <HAL_RCC_ClockConfig+0x284>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d910      	bls.n	800236c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b98      	ldr	r3, [pc, #608]	; (80025ac <HAL_RCC_ClockConfig+0x284>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 020f 	bic.w	r2, r3, #15
 8002352:	4996      	ldr	r1, [pc, #600]	; (80025ac <HAL_RCC_ClockConfig+0x284>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b94      	ldr	r3, [pc, #592]	; (80025ac <HAL_RCC_ClockConfig+0x284>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e1c1      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	4b8c      	ldr	r3, [pc, #560]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002384:	429a      	cmp	r2, r3
 8002386:	d908      	bls.n	800239a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002388:	4b89      	ldr	r3, [pc, #548]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	4986      	ldr	r1, [pc, #536]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002396:	4313      	orrs	r3, r2
 8002398:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d012      	beq.n	80023cc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d909      	bls.n	80023cc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80023b8:	4b7d      	ldr	r3, [pc, #500]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	497a      	ldr	r1, [pc, #488]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d010      	beq.n	80023fa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4b74      	ldr	r3, [pc, #464]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d908      	bls.n	80023fa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b71      	ldr	r3, [pc, #452]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	496e      	ldr	r1, [pc, #440]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	4b69      	ldr	r3, [pc, #420]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	429a      	cmp	r2, r3
 8002414:	d908      	bls.n	8002428 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002416:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4963      	ldr	r1, [pc, #396]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002424:	4313      	orrs	r3, r2
 8002426:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80d2 	beq.w	80025da <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d143      	bne.n	80024ca <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d110      	bne.n	8002472 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002456:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002460:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002472:	f7fe fc45 	bl	8000d00 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002478:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <HAL_RCC_ClockConfig+0x28c>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00f      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002486:	f7fe fc3b 	bl	8000d00 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e12b      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002498:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_ClockConfig+0x28c>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80024ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b0:	4a3f      	ldr	r2, [pc, #252]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80024b2:	f023 0304 	bic.w	r3, r3, #4
 80024b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d121      	bne.n	800250a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e112      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d2:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e106      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0fa      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0f2      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4926      	ldr	r1, [pc, #152]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002518:	4313      	orrs	r3, r2
 800251a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800251c:	f7fe fbf0 	bl	8000d00 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d112      	bne.n	8002550 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7fe fbe8 	bl	8000d00 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0d6      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d1ee      	bne.n	800252c <HAL_RCC_ClockConfig+0x204>
 800254e:	e044      	b.n	80025da <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d112      	bne.n	800257e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255a:	f7fe fbd1 	bl	8000d00 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	; 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0bf      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d1ee      	bne.n	800255a <HAL_RCC_ClockConfig+0x232>
 800257c:	e02d      	b.n	80025da <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d123      	bne.n	80025ce <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe fbba 	bl	8000d00 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0a8      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <HAL_RCC_ClockConfig+0x288>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ee      	bne.n	8002588 <HAL_RCC_ClockConfig+0x260>
 80025aa:	e016      	b.n	80025da <HAL_RCC_ClockConfig+0x2b2>
 80025ac:	40022000 	.word	0x40022000
 80025b0:	46020c00 	.word	0x46020c00
 80025b4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7fe fba2 	bl	8000d00 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e090      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ce:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d1ee      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d208      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80025f6:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f023 020f 	bic.w	r2, r3, #15
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	493d      	ldr	r1, [pc, #244]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002608:	4b3c      	ldr	r3, [pc, #240]	; (80026fc <HAL_RCC_ClockConfig+0x3d4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d210      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_ClockConfig+0x3d4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 020f 	bic.w	r2, r3, #15
 800261e:	4937      	ldr	r1, [pc, #220]	; (80026fc <HAL_RCC_ClockConfig+0x3d4>)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4313      	orrs	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b35      	ldr	r3, [pc, #212]	; (80026fc <HAL_RCC_ClockConfig+0x3d4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e05b      	b.n	80026f0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d010      	beq.n	8002666 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002650:	429a      	cmp	r2, r3
 8002652:	d208      	bcs.n	8002666 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4925      	ldr	r1, [pc, #148]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 8002662:	4313      	orrs	r3, r2
 8002664:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002680:	429a      	cmp	r2, r3
 8002682:	d209      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4919      	ldr	r1, [pc, #100]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d010      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d208      	bcs.n	80026c6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	490d      	ldr	r1, [pc, #52]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80026c6:	f000 f821 	bl	800270c <HAL_RCC_GetSysClockFreq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x3d0>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	490a      	ldr	r1, [pc, #40]	; (8002700 <HAL_RCC_ClockConfig+0x3d8>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
 80026dc:	4a09      	ldr	r2, [pc, #36]	; (8002704 <HAL_RCC_ClockConfig+0x3dc>)
 80026de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_ClockConfig+0x3e0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fac1 	bl	8000c6c <HAL_InitTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	46020c00 	.word	0x46020c00
 80026fc:	40022000 	.word	0x40022000
 8002700:	08004138 	.word	0x08004138
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b08b      	sub	sp, #44	; 0x2c
 8002710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271a:	4b7b      	ldr	r3, [pc, #492]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002724:	4b78      	ldr	r3, [pc, #480]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x34>
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d121      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d11e      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002740:	4b71      	ldr	r3, [pc, #452]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800274c:	4b6e      	ldr	r3, [pc, #440]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800274e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002752:	0b1b      	lsrs	r3, r3, #12
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	e005      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800275c:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	0f1b      	lsrs	r3, r3, #28
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002768:	4a68      	ldr	r2, [pc, #416]	; (800290c <HAL_RCC_GetSysClockFreq+0x200>)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002770:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d110      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800277c:	e00d      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277e:	4b62      	ldr	r3, [pc, #392]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b04      	cmp	r3, #4
 8002788:	d102      	bne.n	8002790 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800278a:	4b61      	ldr	r3, [pc, #388]	; (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	e004      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b08      	cmp	r3, #8
 8002794:	d101      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002796:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <HAL_RCC_GetSysClockFreq+0x204>)
 8002798:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	f040 80ac 	bne.w	80028fa <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80027a2:	4b59      	ldr	r3, [pc, #356]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80027ac:	4b56      	ldr	r3, [pc, #344]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3301      	adds	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80027ba:	4b53      	ldr	r3, [pc, #332]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80027c6:	4b50      	ldr	r3, [pc, #320]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	08db      	lsrs	r3, r3, #3
 80027cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8086 	beq.w	80028f6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d003      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0xec>
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d022      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x130>
 80027f6:	e043      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002802:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002914 <HAL_RCC_GetSysClockFreq+0x208>
 8002806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280a:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800281a:	ed97 6a01 	vldr	s12, [r7, #4]
 800281e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002918 <HAL_RCC_GetSysClockFreq+0x20c>
 8002822:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002826:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800282a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800282e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002836:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800283a:	e046      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002846:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002914 <HAL_RCC_GetSysClockFreq+0x208>
 800284a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800285e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002862:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002918 <HAL_RCC_GetSysClockFreq+0x20c>
 8002866:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800286a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800286e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002872:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800287e:	e024      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	ee07 3a90 	vmov	s15, r3
 8002890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800289a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028a8:	ed97 6a01 	vldr	s12, [r7, #4]
 80028ac:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002918 <HAL_RCC_GetSysClockFreq+0x20c>
 80028b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80028c8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ce:	0e1b      	lsrs	r3, r3, #24
 80028d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028d4:	3301      	adds	r3, #1
 80028d6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80028e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ee:	ee17 3a90 	vmov	r3, s15
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	e001      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80028fa:	6a3b      	ldr	r3, [r7, #32]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	372c      	adds	r7, #44	; 0x2c
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	46020c00 	.word	0x46020c00
 800290c:	08004148 	.word	0x08004148
 8002910:	00f42400 	.word	0x00f42400
 8002914:	4b742400 	.word	0x4b742400
 8002918:	46000000 	.word	0x46000000

0800291c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002920:	f7ff fef4 	bl	800270c <HAL_RCC_GetSysClockFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_RCC_GetHCLKFreq+0x28>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4906      	ldr	r1, [pc, #24]	; (8002948 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002930:	5ccb      	ldrb	r3, [r1, r3]
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	4a05      	ldr	r2, [pc, #20]	; (800294c <HAL_RCC_GetHCLKFreq+0x30>)
 8002938:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_RCC_GetHCLKFreq+0x30>)
 800293c:	681b      	ldr	r3, [r3, #0]
}
 800293e:	4618      	mov	r0, r3
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	46020c00 	.word	0x46020c00
 8002948:	08004138 	.word	0x08004138
 800294c:	20000000 	.word	0x20000000

08002950 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002958:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002966:	f7fe fd8b 	bl	8001480 <HAL_PWREx_GetVoltageRange>
 800296a:	6178      	str	r0, [r7, #20]
 800296c:	e019      	b.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002974:	4a37      	ldr	r2, [pc, #220]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800297e:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800298c:	f7fe fd78 	bl	8001480 <HAL_PWREx_GetVoltageRange>
 8002990:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002998:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800299a:	f023 0304 	bic.w	r3, r3, #4
 800299e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029a8:	d003      	beq.n	80029b2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b0:	d109      	bne.n	80029c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029b8:	d202      	bcs.n	80029c0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80029ba:	2301      	movs	r3, #1
 80029bc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80029be:	e033      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80029c4:	e030      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029cc:	d208      	bcs.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d102      	bne.n	80029dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80029d6:	2303      	movs	r3, #3
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	e025      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e035      	b.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e6:	d90f      	bls.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029f4:	d902      	bls.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	e015      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80029fc:	2301      	movs	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e012      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	e00f      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a0e:	d109      	bne.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a16:	d102      	bne.n	8002a1e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002a18:	2301      	movs	r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	e004      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002a1e:	2302      	movs	r3, #2
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	e001      	b.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002a24:	2301      	movs	r3, #1
 8002a26:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 020f 	bic.w	r2, r3, #15
 8002a30:	4909      	ldr	r1, [pc, #36]	; (8002a58 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	46020c00 	.word	0x46020c00
 8002a58:	40022000 	.word	0x40022000

08002a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e049      	b.n	8002b02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd ff9e 	bl	80009c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 fbfe 	bl	800329c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e049      	b.n	8002bb0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d106      	bne.n	8002b36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f841 	bl	8002bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	4619      	mov	r1, r3
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f000 fba7 	bl	800329c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_TIM_PWM_Start+0x24>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e03c      	b.n	8002c6a <HAL_TIM_PWM_Start+0x9e>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d109      	bne.n	8002c0a <HAL_TIM_PWM_Start+0x3e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e02f      	b.n	8002c6a <HAL_TIM_PWM_Start+0x9e>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d109      	bne.n	8002c24 <HAL_TIM_PWM_Start+0x58>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e022      	b.n	8002c6a <HAL_TIM_PWM_Start+0x9e>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d109      	bne.n	8002c3e <HAL_TIM_PWM_Start+0x72>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e015      	b.n	8002c6a <HAL_TIM_PWM_Start+0x9e>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d109      	bne.n	8002c58 <HAL_TIM_PWM_Start+0x8c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e008      	b.n	8002c6a <HAL_TIM_PWM_Start+0x9e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0d8      	b.n	8002e24 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0xb6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c80:	e023      	b.n	8002cca <HAL_TIM_PWM_Start+0xfe>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start+0xc6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c90:	e01b      	b.n	8002cca <HAL_TIM_PWM_Start+0xfe>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0xd6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca0:	e013      	b.n	8002cca <HAL_TIM_PWM_Start+0xfe>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_PWM_Start+0xe6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cb0:	e00b      	b.n	8002cca <HAL_TIM_PWM_Start+0xfe>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0xf6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc0:	e003      	b.n	8002cca <HAL_TIM_PWM_Start+0xfe>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	6839      	ldr	r1, [r7, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 f84e 	bl	8003d74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a53      	ldr	r2, [pc, #332]	; (8002e2c <HAL_TIM_PWM_Start+0x260>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02c      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x170>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a52      	ldr	r2, [pc, #328]	; (8002e30 <HAL_TIM_PWM_Start+0x264>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d027      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x170>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <HAL_TIM_PWM_Start+0x268>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d022      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x170>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a4f      	ldr	r2, [pc, #316]	; (8002e38 <HAL_TIM_PWM_Start+0x26c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d01d      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x170>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a4d      	ldr	r2, [pc, #308]	; (8002e3c <HAL_TIM_PWM_Start+0x270>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d018      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x170>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4c      	ldr	r2, [pc, #304]	; (8002e40 <HAL_TIM_PWM_Start+0x274>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x170>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a4a      	ldr	r2, [pc, #296]	; (8002e44 <HAL_TIM_PWM_Start+0x278>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x170>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a49      	ldr	r2, [pc, #292]	; (8002e48 <HAL_TIM_PWM_Start+0x27c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x170>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a47      	ldr	r2, [pc, #284]	; (8002e4c <HAL_TIM_PWM_Start+0x280>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIM_PWM_Start+0x170>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a46      	ldr	r2, [pc, #280]	; (8002e50 <HAL_TIM_PWM_Start+0x284>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_TIM_PWM_Start+0x174>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <HAL_TIM_PWM_Start+0x176>
 8002d40:	2300      	movs	r3, #0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a34      	ldr	r2, [pc, #208]	; (8002e2c <HAL_TIM_PWM_Start+0x260>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d040      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a32      	ldr	r2, [pc, #200]	; (8002e30 <HAL_TIM_PWM_Start+0x264>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d03b      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d72:	d036      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d7c:	d031      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <HAL_TIM_PWM_Start+0x288>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d02c      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a32      	ldr	r2, [pc, #200]	; (8002e58 <HAL_TIM_PWM_Start+0x28c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d027      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <HAL_TIM_PWM_Start+0x290>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d022      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <HAL_TIM_PWM_Start+0x294>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2e      	ldr	r2, [pc, #184]	; (8002e64 <HAL_TIM_PWM_Start+0x298>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d018      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <HAL_TIM_PWM_Start+0x29c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <HAL_TIM_PWM_Start+0x268>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <HAL_TIM_PWM_Start+0x26c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <HAL_TIM_PWM_Start+0x270>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_TIM_PWM_Start+0x216>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <HAL_TIM_PWM_Start+0x274>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d115      	bne.n	8002e0e <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_TIM_PWM_Start+0x2a0>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b06      	cmp	r3, #6
 8002df2:	d015      	beq.n	8002e20 <HAL_TIM_PWM_Start+0x254>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfa:	d011      	beq.n	8002e20 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0c:	e008      	b.n	8002e20 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e000      	b.n	8002e22 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	50012c00 	.word	0x50012c00
 8002e34:	40013400 	.word	0x40013400
 8002e38:	50013400 	.word	0x50013400
 8002e3c:	40014000 	.word	0x40014000
 8002e40:	50014000 	.word	0x50014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	50014400 	.word	0x50014400
 8002e4c:	40014800 	.word	0x40014800
 8002e50:	50014800 	.word	0x50014800
 8002e54:	40000400 	.word	0x40000400
 8002e58:	50000400 	.word	0x50000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	50000800 	.word	0x50000800
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	50000c00 	.word	0x50000c00
 8002e6c:	00010007 	.word	0x00010007

08002e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e0ff      	b.n	800308e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b14      	cmp	r3, #20
 8002e9a:	f200 80f0 	bhi.w	800307e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002ef9 	.word	0x08002ef9
 8002ea8:	0800307f 	.word	0x0800307f
 8002eac:	0800307f 	.word	0x0800307f
 8002eb0:	0800307f 	.word	0x0800307f
 8002eb4:	08002f39 	.word	0x08002f39
 8002eb8:	0800307f 	.word	0x0800307f
 8002ebc:	0800307f 	.word	0x0800307f
 8002ec0:	0800307f 	.word	0x0800307f
 8002ec4:	08002f7b 	.word	0x08002f7b
 8002ec8:	0800307f 	.word	0x0800307f
 8002ecc:	0800307f 	.word	0x0800307f
 8002ed0:	0800307f 	.word	0x0800307f
 8002ed4:	08002fbb 	.word	0x08002fbb
 8002ed8:	0800307f 	.word	0x0800307f
 8002edc:	0800307f 	.word	0x0800307f
 8002ee0:	0800307f 	.word	0x0800307f
 8002ee4:	08002ffd 	.word	0x08002ffd
 8002ee8:	0800307f 	.word	0x0800307f
 8002eec:	0800307f 	.word	0x0800307f
 8002ef0:	0800307f 	.word	0x0800307f
 8002ef4:	0800303d 	.word	0x0800303d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fac6 	bl	8003490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0208 	orr.w	r2, r2, #8
 8002f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6999      	ldr	r1, [r3, #24]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	619a      	str	r2, [r3, #24]
      break;
 8002f36:	e0a5      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fb68 	bl	8003614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6999      	ldr	r1, [r3, #24]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	021a      	lsls	r2, r3, #8
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	619a      	str	r2, [r3, #24]
      break;
 8002f78:	e084      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fbf7 	bl	8003774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0208 	orr.w	r2, r2, #8
 8002f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0204 	bic.w	r2, r2, #4
 8002fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69d9      	ldr	r1, [r3, #28]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	61da      	str	r2, [r3, #28]
      break;
 8002fb8:	e064      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fc85 	bl	80038d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69d9      	ldr	r1, [r3, #28]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	61da      	str	r2, [r3, #28]
      break;
 8002ffa:	e043      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fd14 	bl	8003a30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0208 	orr.w	r2, r2, #8
 8003016:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0204 	bic.w	r2, r2, #4
 8003026:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800303a:	e023      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fd76 	bl	8003b34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003056:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003066:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	021a      	lsls	r2, r3, #8
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800307c:	e002      	b.n	8003084 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
      break;
 8003082:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800308c:	7dfb      	ldrb	r3, [r7, #23]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop

08003098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_TIM_ConfigClockSource+0x1c>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e0e6      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x1ea>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80030d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a67      	ldr	r2, [pc, #412]	; (800328c <HAL_TIM_ConfigClockSource+0x1f4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	f000 80b1 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 80030f4:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_TIM_ConfigClockSource+0x1f4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	f200 80b6 	bhi.w	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 80030fc:	4a64      	ldr	r2, [pc, #400]	; (8003290 <HAL_TIM_ConfigClockSource+0x1f8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	f000 80a9 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 8003104:	4a62      	ldr	r2, [pc, #392]	; (8003290 <HAL_TIM_ConfigClockSource+0x1f8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	f200 80ae 	bhi.w	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 800310c:	4a61      	ldr	r2, [pc, #388]	; (8003294 <HAL_TIM_ConfigClockSource+0x1fc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	f000 80a1 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 8003114:	4a5f      	ldr	r2, [pc, #380]	; (8003294 <HAL_TIM_ConfigClockSource+0x1fc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	f200 80a6 	bhi.w	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 800311c:	4a5e      	ldr	r2, [pc, #376]	; (8003298 <HAL_TIM_ConfigClockSource+0x200>)
 800311e:	4293      	cmp	r3, r2
 8003120:	f000 8099 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 8003124:	4a5c      	ldr	r2, [pc, #368]	; (8003298 <HAL_TIM_ConfigClockSource+0x200>)
 8003126:	4293      	cmp	r3, r2
 8003128:	f200 809e 	bhi.w	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 800312c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003130:	f000 8091 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 8003134:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003138:	f200 8096 	bhi.w	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 800313c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003140:	f000 8089 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 8003144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003148:	f200 808e 	bhi.w	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 800314c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003150:	d03e      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x138>
 8003152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003156:	f200 8087 	bhi.w	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315e:	f000 8086 	beq.w	800326e <HAL_TIM_ConfigClockSource+0x1d6>
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003166:	d87f      	bhi.n	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 8003168:	2b70      	cmp	r3, #112	; 0x70
 800316a:	d01a      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x10a>
 800316c:	2b70      	cmp	r3, #112	; 0x70
 800316e:	d87b      	bhi.n	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 8003170:	2b60      	cmp	r3, #96	; 0x60
 8003172:	d050      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x17e>
 8003174:	2b60      	cmp	r3, #96	; 0x60
 8003176:	d877      	bhi.n	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 8003178:	2b50      	cmp	r3, #80	; 0x50
 800317a:	d03c      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x15e>
 800317c:	2b50      	cmp	r3, #80	; 0x50
 800317e:	d873      	bhi.n	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d058      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x19e>
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d86f      	bhi.n	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 8003188:	2b30      	cmp	r3, #48	; 0x30
 800318a:	d064      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 800318c:	2b30      	cmp	r3, #48	; 0x30
 800318e:	d86b      	bhi.n	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 8003190:	2b20      	cmp	r3, #32
 8003192:	d060      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 8003194:	2b20      	cmp	r3, #32
 8003196:	d867      	bhi.n	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d05c      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 800319c:	2b10      	cmp	r3, #16
 800319e:	d05a      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x1be>
 80031a0:	e062      	b.n	8003268 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f000 fdbf 	bl	8003d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	609a      	str	r2, [r3, #8]
      break;
 80031ce:	e04f      	b.n	8003270 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6899      	ldr	r1, [r3, #8]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f000 fda8 	bl	8003d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f2:	609a      	str	r2, [r3, #8]
      break;
 80031f4:	e03c      	b.n	8003270 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	461a      	mov	r2, r3
 8003204:	f000 fd1a 	bl	8003c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2150      	movs	r1, #80	; 0x50
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fd73 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003214:	e02c      	b.n	8003270 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	461a      	mov	r2, r3
 8003224:	f000 fd39 	bl	8003c9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2160      	movs	r1, #96	; 0x60
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fd63 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003234:	e01c      	b.n	8003270 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	461a      	mov	r2, r3
 8003244:	f000 fcfa 	bl	8003c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2140      	movs	r1, #64	; 0x40
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fd53 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003254:	e00c      	b.n	8003270 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4619      	mov	r1, r3
 8003260:	4610      	mov	r0, r2
 8003262:	f000 fd4a 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 8003266:	e003      	b.n	8003270 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
      break;
 800326c:	e000      	b.n	8003270 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800326e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	00100070 	.word	0x00100070
 8003290:	00100040 	.word	0x00100040
 8003294:	00100030 	.word	0x00100030
 8003298:	00100020 	.word	0x00100020

0800329c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a68      	ldr	r2, [pc, #416]	; (8003450 <TIM_Base_SetConfig+0x1b4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d02b      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a67      	ldr	r2, [pc, #412]	; (8003454 <TIM_Base_SetConfig+0x1b8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d027      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c2:	d023      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ca:	d01f      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a62      	ldr	r2, [pc, #392]	; (8003458 <TIM_Base_SetConfig+0x1bc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d01b      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a61      	ldr	r2, [pc, #388]	; (800345c <TIM_Base_SetConfig+0x1c0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d017      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a60      	ldr	r2, [pc, #384]	; (8003460 <TIM_Base_SetConfig+0x1c4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a5f      	ldr	r2, [pc, #380]	; (8003464 <TIM_Base_SetConfig+0x1c8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00f      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a5e      	ldr	r2, [pc, #376]	; (8003468 <TIM_Base_SetConfig+0x1cc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00b      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a5d      	ldr	r2, [pc, #372]	; (800346c <TIM_Base_SetConfig+0x1d0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a5c      	ldr	r2, [pc, #368]	; (8003470 <TIM_Base_SetConfig+0x1d4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_Base_SetConfig+0x70>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a5b      	ldr	r2, [pc, #364]	; (8003474 <TIM_Base_SetConfig+0x1d8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4b      	ldr	r2, [pc, #300]	; (8003450 <TIM_Base_SetConfig+0x1b4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d043      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a4a      	ldr	r2, [pc, #296]	; (8003454 <TIM_Base_SetConfig+0x1b8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d03f      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d03b      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333c:	d037      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a45      	ldr	r2, [pc, #276]	; (8003458 <TIM_Base_SetConfig+0x1bc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d033      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a44      	ldr	r2, [pc, #272]	; (800345c <TIM_Base_SetConfig+0x1c0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d02f      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a43      	ldr	r2, [pc, #268]	; (8003460 <TIM_Base_SetConfig+0x1c4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d02b      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a42      	ldr	r2, [pc, #264]	; (8003464 <TIM_Base_SetConfig+0x1c8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d027      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a41      	ldr	r2, [pc, #260]	; (8003468 <TIM_Base_SetConfig+0x1cc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d023      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a40      	ldr	r2, [pc, #256]	; (800346c <TIM_Base_SetConfig+0x1d0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01f      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a3f      	ldr	r2, [pc, #252]	; (8003470 <TIM_Base_SetConfig+0x1d4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01b      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a3e      	ldr	r2, [pc, #248]	; (8003474 <TIM_Base_SetConfig+0x1d8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d017      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a3d      	ldr	r2, [pc, #244]	; (8003478 <TIM_Base_SetConfig+0x1dc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a3c      	ldr	r2, [pc, #240]	; (800347c <TIM_Base_SetConfig+0x1e0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00f      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a3b      	ldr	r2, [pc, #236]	; (8003480 <TIM_Base_SetConfig+0x1e4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00b      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a3a      	ldr	r2, [pc, #232]	; (8003484 <TIM_Base_SetConfig+0x1e8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a39      	ldr	r2, [pc, #228]	; (8003488 <TIM_Base_SetConfig+0x1ec>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <TIM_Base_SetConfig+0x112>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a38      	ldr	r2, [pc, #224]	; (800348c <TIM_Base_SetConfig+0x1f0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a1a      	ldr	r2, [pc, #104]	; (8003450 <TIM_Base_SetConfig+0x1b4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d023      	beq.n	8003434 <TIM_Base_SetConfig+0x198>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a19      	ldr	r2, [pc, #100]	; (8003454 <TIM_Base_SetConfig+0x1b8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d01f      	beq.n	8003434 <TIM_Base_SetConfig+0x198>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <TIM_Base_SetConfig+0x1d4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d01b      	beq.n	8003434 <TIM_Base_SetConfig+0x198>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <TIM_Base_SetConfig+0x1d8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d017      	beq.n	8003434 <TIM_Base_SetConfig+0x198>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <TIM_Base_SetConfig+0x1dc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <TIM_Base_SetConfig+0x198>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1b      	ldr	r2, [pc, #108]	; (800347c <TIM_Base_SetConfig+0x1e0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00f      	beq.n	8003434 <TIM_Base_SetConfig+0x198>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <TIM_Base_SetConfig+0x1e4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00b      	beq.n	8003434 <TIM_Base_SetConfig+0x198>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a19      	ldr	r2, [pc, #100]	; (8003484 <TIM_Base_SetConfig+0x1e8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_Base_SetConfig+0x198>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a18      	ldr	r2, [pc, #96]	; (8003488 <TIM_Base_SetConfig+0x1ec>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_Base_SetConfig+0x198>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <TIM_Base_SetConfig+0x1f0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d103      	bne.n	800343c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	615a      	str	r2, [r3, #20]
}
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40012c00 	.word	0x40012c00
 8003454:	50012c00 	.word	0x50012c00
 8003458:	40000400 	.word	0x40000400
 800345c:	50000400 	.word	0x50000400
 8003460:	40000800 	.word	0x40000800
 8003464:	50000800 	.word	0x50000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	50000c00 	.word	0x50000c00
 8003470:	40013400 	.word	0x40013400
 8003474:	50013400 	.word	0x50013400
 8003478:	40014000 	.word	0x40014000
 800347c:	50014000 	.word	0x50014000
 8003480:	40014400 	.word	0x40014400
 8003484:	50014400 	.word	0x50014400
 8003488:	40014800 	.word	0x40014800
 800348c:	50014800 	.word	0x50014800

08003490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0303 	bic.w	r3, r3, #3
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 0302 	bic.w	r3, r3, #2
 80034dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a40      	ldr	r2, [pc, #256]	; (80035ec <TIM_OC1_SetConfig+0x15c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d023      	beq.n	8003538 <TIM_OC1_SetConfig+0xa8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3f      	ldr	r2, [pc, #252]	; (80035f0 <TIM_OC1_SetConfig+0x160>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d01f      	beq.n	8003538 <TIM_OC1_SetConfig+0xa8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3e      	ldr	r2, [pc, #248]	; (80035f4 <TIM_OC1_SetConfig+0x164>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01b      	beq.n	8003538 <TIM_OC1_SetConfig+0xa8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3d      	ldr	r2, [pc, #244]	; (80035f8 <TIM_OC1_SetConfig+0x168>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d017      	beq.n	8003538 <TIM_OC1_SetConfig+0xa8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3c      	ldr	r2, [pc, #240]	; (80035fc <TIM_OC1_SetConfig+0x16c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <TIM_OC1_SetConfig+0xa8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3b      	ldr	r2, [pc, #236]	; (8003600 <TIM_OC1_SetConfig+0x170>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00f      	beq.n	8003538 <TIM_OC1_SetConfig+0xa8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3a      	ldr	r2, [pc, #232]	; (8003604 <TIM_OC1_SetConfig+0x174>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00b      	beq.n	8003538 <TIM_OC1_SetConfig+0xa8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a39      	ldr	r2, [pc, #228]	; (8003608 <TIM_OC1_SetConfig+0x178>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <TIM_OC1_SetConfig+0xa8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a38      	ldr	r2, [pc, #224]	; (800360c <TIM_OC1_SetConfig+0x17c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_OC1_SetConfig+0xa8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a37      	ldr	r2, [pc, #220]	; (8003610 <TIM_OC1_SetConfig+0x180>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d10c      	bne.n	8003552 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f023 0308 	bic.w	r3, r3, #8
 800353e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <TIM_OC1_SetConfig+0x15c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d023      	beq.n	80035a2 <TIM_OC1_SetConfig+0x112>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <TIM_OC1_SetConfig+0x160>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01f      	beq.n	80035a2 <TIM_OC1_SetConfig+0x112>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <TIM_OC1_SetConfig+0x164>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01b      	beq.n	80035a2 <TIM_OC1_SetConfig+0x112>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <TIM_OC1_SetConfig+0x168>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d017      	beq.n	80035a2 <TIM_OC1_SetConfig+0x112>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <TIM_OC1_SetConfig+0x16c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <TIM_OC1_SetConfig+0x112>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <TIM_OC1_SetConfig+0x170>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00f      	beq.n	80035a2 <TIM_OC1_SetConfig+0x112>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <TIM_OC1_SetConfig+0x174>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00b      	beq.n	80035a2 <TIM_OC1_SetConfig+0x112>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <TIM_OC1_SetConfig+0x178>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <TIM_OC1_SetConfig+0x112>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <TIM_OC1_SetConfig+0x17c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_OC1_SetConfig+0x112>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <TIM_OC1_SetConfig+0x180>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d111      	bne.n	80035c6 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	50012c00 	.word	0x50012c00
 80035f4:	40013400 	.word	0x40013400
 80035f8:	50013400 	.word	0x50013400
 80035fc:	40014000 	.word	0x40014000
 8003600:	50014000 	.word	0x50014000
 8003604:	40014400 	.word	0x40014400
 8003608:	50014400 	.word	0x50014400
 800360c:	40014800 	.word	0x40014800
 8003610:	50014800 	.word	0x50014800

08003614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f023 0210 	bic.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0320 	bic.w	r3, r3, #32
 8003662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a36      	ldr	r2, [pc, #216]	; (800374c <TIM_OC2_SetConfig+0x138>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00b      	beq.n	8003690 <TIM_OC2_SetConfig+0x7c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a35      	ldr	r2, [pc, #212]	; (8003750 <TIM_OC2_SetConfig+0x13c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <TIM_OC2_SetConfig+0x7c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a34      	ldr	r2, [pc, #208]	; (8003754 <TIM_OC2_SetConfig+0x140>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_OC2_SetConfig+0x7c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a33      	ldr	r2, [pc, #204]	; (8003758 <TIM_OC2_SetConfig+0x144>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10d      	bne.n	80036ac <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a27      	ldr	r2, [pc, #156]	; (800374c <TIM_OC2_SetConfig+0x138>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d023      	beq.n	80036fc <TIM_OC2_SetConfig+0xe8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a26      	ldr	r2, [pc, #152]	; (8003750 <TIM_OC2_SetConfig+0x13c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d01f      	beq.n	80036fc <TIM_OC2_SetConfig+0xe8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <TIM_OC2_SetConfig+0x140>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d01b      	beq.n	80036fc <TIM_OC2_SetConfig+0xe8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a24      	ldr	r2, [pc, #144]	; (8003758 <TIM_OC2_SetConfig+0x144>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d017      	beq.n	80036fc <TIM_OC2_SetConfig+0xe8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a23      	ldr	r2, [pc, #140]	; (800375c <TIM_OC2_SetConfig+0x148>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d013      	beq.n	80036fc <TIM_OC2_SetConfig+0xe8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a22      	ldr	r2, [pc, #136]	; (8003760 <TIM_OC2_SetConfig+0x14c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00f      	beq.n	80036fc <TIM_OC2_SetConfig+0xe8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a21      	ldr	r2, [pc, #132]	; (8003764 <TIM_OC2_SetConfig+0x150>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <TIM_OC2_SetConfig+0xe8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a20      	ldr	r2, [pc, #128]	; (8003768 <TIM_OC2_SetConfig+0x154>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <TIM_OC2_SetConfig+0xe8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <TIM_OC2_SetConfig+0x158>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_OC2_SetConfig+0xe8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <TIM_OC2_SetConfig+0x15c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d113      	bne.n	8003724 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800370a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40012c00 	.word	0x40012c00
 8003750:	50012c00 	.word	0x50012c00
 8003754:	40013400 	.word	0x40013400
 8003758:	50013400 	.word	0x50013400
 800375c:	40014000 	.word	0x40014000
 8003760:	50014000 	.word	0x50014000
 8003764:	40014400 	.word	0x40014400
 8003768:	50014400 	.word	0x50014400
 800376c:	40014800 	.word	0x40014800
 8003770:	50014800 	.word	0x50014800

08003774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a35      	ldr	r2, [pc, #212]	; (80038a8 <TIM_OC3_SetConfig+0x134>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00b      	beq.n	80037ee <TIM_OC3_SetConfig+0x7a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a34      	ldr	r2, [pc, #208]	; (80038ac <TIM_OC3_SetConfig+0x138>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_OC3_SetConfig+0x7a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a33      	ldr	r2, [pc, #204]	; (80038b0 <TIM_OC3_SetConfig+0x13c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d003      	beq.n	80037ee <TIM_OC3_SetConfig+0x7a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a32      	ldr	r2, [pc, #200]	; (80038b4 <TIM_OC3_SetConfig+0x140>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10d      	bne.n	800380a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <TIM_OC3_SetConfig+0x134>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d023      	beq.n	800385a <TIM_OC3_SetConfig+0xe6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a25      	ldr	r2, [pc, #148]	; (80038ac <TIM_OC3_SetConfig+0x138>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01f      	beq.n	800385a <TIM_OC3_SetConfig+0xe6>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a24      	ldr	r2, [pc, #144]	; (80038b0 <TIM_OC3_SetConfig+0x13c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01b      	beq.n	800385a <TIM_OC3_SetConfig+0xe6>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a23      	ldr	r2, [pc, #140]	; (80038b4 <TIM_OC3_SetConfig+0x140>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d017      	beq.n	800385a <TIM_OC3_SetConfig+0xe6>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <TIM_OC3_SetConfig+0x144>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <TIM_OC3_SetConfig+0xe6>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a21      	ldr	r2, [pc, #132]	; (80038bc <TIM_OC3_SetConfig+0x148>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00f      	beq.n	800385a <TIM_OC3_SetConfig+0xe6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a20      	ldr	r2, [pc, #128]	; (80038c0 <TIM_OC3_SetConfig+0x14c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00b      	beq.n	800385a <TIM_OC3_SetConfig+0xe6>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a1f      	ldr	r2, [pc, #124]	; (80038c4 <TIM_OC3_SetConfig+0x150>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <TIM_OC3_SetConfig+0xe6>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <TIM_OC3_SetConfig+0x154>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d003      	beq.n	800385a <TIM_OC3_SetConfig+0xe6>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <TIM_OC3_SetConfig+0x158>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d113      	bne.n	8003882 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	bf00      	nop
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	50012c00 	.word	0x50012c00
 80038b0:	40013400 	.word	0x40013400
 80038b4:	50013400 	.word	0x50013400
 80038b8:	40014000 	.word	0x40014000
 80038bc:	50014000 	.word	0x50014000
 80038c0:	40014400 	.word	0x40014400
 80038c4:	50014400 	.word	0x50014400
 80038c8:	40014800 	.word	0x40014800
 80038cc:	50014800 	.word	0x50014800

080038d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800391e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	031b      	lsls	r3, r3, #12
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a36      	ldr	r2, [pc, #216]	; (8003a08 <TIM_OC4_SetConfig+0x138>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00b      	beq.n	800394c <TIM_OC4_SetConfig+0x7c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a35      	ldr	r2, [pc, #212]	; (8003a0c <TIM_OC4_SetConfig+0x13c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d007      	beq.n	800394c <TIM_OC4_SetConfig+0x7c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a34      	ldr	r2, [pc, #208]	; (8003a10 <TIM_OC4_SetConfig+0x140>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_OC4_SetConfig+0x7c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a33      	ldr	r2, [pc, #204]	; (8003a14 <TIM_OC4_SetConfig+0x144>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10d      	bne.n	8003968 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	031b      	lsls	r3, r3, #12
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <TIM_OC4_SetConfig+0x138>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d023      	beq.n	80039b8 <TIM_OC4_SetConfig+0xe8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <TIM_OC4_SetConfig+0x13c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d01f      	beq.n	80039b8 <TIM_OC4_SetConfig+0xe8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <TIM_OC4_SetConfig+0x140>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d01b      	beq.n	80039b8 <TIM_OC4_SetConfig+0xe8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a24      	ldr	r2, [pc, #144]	; (8003a14 <TIM_OC4_SetConfig+0x144>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d017      	beq.n	80039b8 <TIM_OC4_SetConfig+0xe8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a23      	ldr	r2, [pc, #140]	; (8003a18 <TIM_OC4_SetConfig+0x148>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <TIM_OC4_SetConfig+0xe8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <TIM_OC4_SetConfig+0x14c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00f      	beq.n	80039b8 <TIM_OC4_SetConfig+0xe8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <TIM_OC4_SetConfig+0x150>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00b      	beq.n	80039b8 <TIM_OC4_SetConfig+0xe8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <TIM_OC4_SetConfig+0x154>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <TIM_OC4_SetConfig+0xe8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a1f      	ldr	r2, [pc, #124]	; (8003a28 <TIM_OC4_SetConfig+0x158>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_OC4_SetConfig+0xe8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <TIM_OC4_SetConfig+0x15c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d113      	bne.n	80039e0 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	50012c00 	.word	0x50012c00
 8003a10:	40013400 	.word	0x40013400
 8003a14:	50013400 	.word	0x50013400
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	50014000 	.word	0x50014000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	50014400 	.word	0x50014400
 8003a28:	40014800 	.word	0x40014800
 8003a2c:	50014800 	.word	0x50014800

08003a30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a21      	ldr	r2, [pc, #132]	; (8003b0c <TIM_OC5_SetConfig+0xdc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d023      	beq.n	8003ad2 <TIM_OC5_SetConfig+0xa2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a20      	ldr	r2, [pc, #128]	; (8003b10 <TIM_OC5_SetConfig+0xe0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01f      	beq.n	8003ad2 <TIM_OC5_SetConfig+0xa2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <TIM_OC5_SetConfig+0xe4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01b      	beq.n	8003ad2 <TIM_OC5_SetConfig+0xa2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1e      	ldr	r2, [pc, #120]	; (8003b18 <TIM_OC5_SetConfig+0xe8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d017      	beq.n	8003ad2 <TIM_OC5_SetConfig+0xa2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <TIM_OC5_SetConfig+0xec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <TIM_OC5_SetConfig+0xa2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <TIM_OC5_SetConfig+0xf0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00f      	beq.n	8003ad2 <TIM_OC5_SetConfig+0xa2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <TIM_OC5_SetConfig+0xf4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_OC5_SetConfig+0xa2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a1a      	ldr	r2, [pc, #104]	; (8003b28 <TIM_OC5_SetConfig+0xf8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_OC5_SetConfig+0xa2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a19      	ldr	r2, [pc, #100]	; (8003b2c <TIM_OC5_SetConfig+0xfc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_OC5_SetConfig+0xa2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a18      	ldr	r2, [pc, #96]	; (8003b30 <TIM_OC5_SetConfig+0x100>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d109      	bne.n	8003ae6 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	50012c00 	.word	0x50012c00
 8003b14:	40013400 	.word	0x40013400
 8003b18:	50013400 	.word	0x50013400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	50014000 	.word	0x50014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	50014400 	.word	0x50014400
 8003b2c:	40014800 	.word	0x40014800
 8003b30:	50014800 	.word	0x50014800

08003b34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	051b      	lsls	r3, r3, #20
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <TIM_OC6_SetConfig+0xe0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d023      	beq.n	8003bd8 <TIM_OC6_SetConfig+0xa4>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <TIM_OC6_SetConfig+0xe4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d01f      	beq.n	8003bd8 <TIM_OC6_SetConfig+0xa4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <TIM_OC6_SetConfig+0xe8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d01b      	beq.n	8003bd8 <TIM_OC6_SetConfig+0xa4>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <TIM_OC6_SetConfig+0xec>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d017      	beq.n	8003bd8 <TIM_OC6_SetConfig+0xa4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <TIM_OC6_SetConfig+0xf0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <TIM_OC6_SetConfig+0xa4>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <TIM_OC6_SetConfig+0xf4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_OC6_SetConfig+0xa4>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <TIM_OC6_SetConfig+0xf8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_OC6_SetConfig+0xa4>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <TIM_OC6_SetConfig+0xfc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_OC6_SetConfig+0xa4>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a1a      	ldr	r2, [pc, #104]	; (8003c34 <TIM_OC6_SetConfig+0x100>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_OC6_SetConfig+0xa4>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <TIM_OC6_SetConfig+0x104>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d109      	bne.n	8003bec <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	029b      	lsls	r3, r3, #10
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	50012c00 	.word	0x50012c00
 8003c1c:	40013400 	.word	0x40013400
 8003c20:	50013400 	.word	0x50013400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	50014000 	.word	0x50014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	50014400 	.word	0x50014400
 8003c34:	40014800 	.word	0x40014800
 8003c38:	50014800 	.word	0x50014800

08003c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 030a 	bic.w	r3, r3, #10
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b087      	sub	sp, #28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f023 0210 	bic.w	r2, r3, #16
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  *            @arg TIM_TS_ITR11: Internal Trigger 11
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f043 0307 	orr.w	r3, r3, #7
 8003d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	609a      	str	r2, [r3, #8]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	021a      	lsls	r2, r3, #8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2201      	movs	r2, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	401a      	ands	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a1a      	ldr	r2, [r3, #32]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e097      	b.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a45      	ldr	r2, [pc, #276]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00e      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a44      	ldr	r2, [pc, #272]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a42      	ldr	r2, [pc, #264]	; (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a41      	ldr	r2, [pc, #260]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d108      	bne.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2f      	ldr	r2, [pc, #188]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d040      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d03b      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d036      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e76:	d031      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a29      	ldr	r2, [pc, #164]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02c      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a28      	ldr	r2, [pc, #160]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d027      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a26      	ldr	r2, [pc, #152]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d022      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d01d      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1a      	ldr	r2, [pc, #104]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10c      	bne.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40012c00 	.word	0x40012c00
 8003f18:	50012c00 	.word	0x50012c00
 8003f1c:	40013400 	.word	0x40013400
 8003f20:	50013400 	.word	0x50013400
 8003f24:	40000400 	.word	0x40000400
 8003f28:	50000400 	.word	0x50000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	50000800 	.word	0x50000800
 8003f34:	40000c00 	.word	0x40000c00
 8003f38:	50000c00 	.word	0x50000c00
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	50014000 	.word	0x50014000

08003f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e0a5      	b.n	80040ac <HAL_TIMEx_ConfigBreakDeadTime+0x168>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a36      	ldr	r2, [pc, #216]	; (80040b8 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a34      	ldr	r2, [pc, #208]	; (80040bc <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a33      	ldr	r2, [pc, #204]	; (80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIMEx_ConfigBreakDeadTime+0xbe>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a31      	ldr	r2, [pc, #196]	; (80040c4 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d106      	bne.n	8004010 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a28      	ldr	r2, [pc, #160]	; (80040b8 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a27      	ldr	r2, [pc, #156]	; (80040bc <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a25      	ldr	r2, [pc, #148]	; (80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a24      	ldr	r2, [pc, #144]	; (80040c4 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d130      	bne.n	800409a <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	051b      	lsls	r3, r3, #20
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <HAL_TIMEx_ConfigBreakDeadTime+0x174>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a12      	ldr	r2, [pc, #72]	; (80040bc <HAL_TIMEx_ConfigBreakDeadTime+0x178>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <HAL_TIMEx_ConfigBreakDeadTime+0x17c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_TIMEx_ConfigBreakDeadTime+0x148>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <HAL_TIMEx_ConfigBreakDeadTime+0x180>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d106      	bne.n	800409a <HAL_TIMEx_ConfigBreakDeadTime+0x156>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	50012c00 	.word	0x50012c00
 80040c0:	40013400 	.word	0x40013400
 80040c4:	50013400 	.word	0x50013400

080040c8 <__libc_init_array>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4d0d      	ldr	r5, [pc, #52]	; (8004100 <__libc_init_array+0x38>)
 80040cc:	2600      	movs	r6, #0
 80040ce:	4c0d      	ldr	r4, [pc, #52]	; (8004104 <__libc_init_array+0x3c>)
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	42a6      	cmp	r6, r4
 80040d6:	d109      	bne.n	80040ec <__libc_init_array+0x24>
 80040d8:	4d0b      	ldr	r5, [pc, #44]	; (8004108 <__libc_init_array+0x40>)
 80040da:	2600      	movs	r6, #0
 80040dc:	4c0b      	ldr	r4, [pc, #44]	; (800410c <__libc_init_array+0x44>)
 80040de:	f000 f81f 	bl	8004120 <_init>
 80040e2:	1b64      	subs	r4, r4, r5
 80040e4:	10a4      	asrs	r4, r4, #2
 80040e6:	42a6      	cmp	r6, r4
 80040e8:	d105      	bne.n	80040f6 <__libc_init_array+0x2e>
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f0:	3601      	adds	r6, #1
 80040f2:	4798      	blx	r3
 80040f4:	e7ee      	b.n	80040d4 <__libc_init_array+0xc>
 80040f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fa:	3601      	adds	r6, #1
 80040fc:	4798      	blx	r3
 80040fe:	e7f2      	b.n	80040e6 <__libc_init_array+0x1e>
 8004100:	08004208 	.word	0x08004208
 8004104:	08004208 	.word	0x08004208
 8004108:	08004208 	.word	0x08004208
 800410c:	0800420c 	.word	0x0800420c

08004110 <memset>:
 8004110:	4402      	add	r2, r0
 8004112:	4603      	mov	r3, r0
 8004114:	4293      	cmp	r3, r2
 8004116:	d100      	bne.n	800411a <memset+0xa>
 8004118:	4770      	bx	lr
 800411a:	f803 1b01 	strb.w	r1, [r3], #1
 800411e:	e7f9      	b.n	8004114 <memset+0x4>

08004120 <_init>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr

0800412c <_fini>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr
